[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "hyper-shotgun",
    "section": "",
    "text": "pooking and looking üëÄ\n\n\ndiving into partial dependence plots\n\n\n \n\n\n\n\n\n2024-03-14\n\n\nJoost de Theije + LLM\n\n\n7 min\n\n\n\n\n\n\n\n\n\n\n\n\nBoring linear forecast\n\n\nimproving performance by adding some dummies\n\n\n \n\n\n\n\n\n2023-03-5\n\n\nJoost de Theije\n\n\n8 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html",
    "href": "posts/boring_forecast/boring_linear_forecast.html",
    "title": "Boring linear forecast",
    "section": "",
    "text": "Linear regression in itself is not performant for longer time-scales\nMost systems have some capabilities for linear regression built-in\nAdding dummy variables for datetime features(i.e.¬†month, weekday etc.) adds predictive power"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#tldr",
    "href": "posts/boring_forecast/boring_linear_forecast.html#tldr",
    "title": "Boring linear forecast",
    "section": "",
    "text": "Linear regression in itself is not performant for longer time-scales\nMost systems have some capabilities for linear regression built-in\nAdding dummy variables for datetime features(i.e.¬†month, weekday etc.) adds predictive power"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#introduction",
    "href": "posts/boring_forecast/boring_linear_forecast.html#introduction",
    "title": "Boring linear forecast",
    "section": "2 Introduction",
    "text": "2 Introduction\nLinear regression is a statistical model that can be used to determine the linear relationship between variables, most of the time this is seen as a beginners model that is not particularly useful, and most of the time it is discarded and replaced by a shiny neural net or a fancy gradient-boosted model.\nthe nice feature of linear regression is that the direction and magnitude of the relationship can be estimated with the help of linear regression. It is used in many fields including but not limited to Economics, Finance, Social science, etc. The popularity of this model is model is likely due to the fact that most systems have built-in functionality that enables the training of linear models, they are also very cheap/fast to train, and one can also determine that the model has optimal parameters. all these features make linear regression an excellent model to start with.\nTo extend the capabilities of the linear model for time series forecasting, dummy variables can be utilized. These dummies can provide additional information about the relationship over time, can help the model to identify seasonality over time, and also gauge the effect of one-off events, examples are price reductions or natural disasters.\nFor instance, we can create a dummy to identify certain datetime features such as what the month is or whether a particular day is a weekday or a weekend."
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#imports",
    "href": "posts/boring_forecast/boring_linear_forecast.html#imports",
    "title": "Boring linear forecast",
    "section": "3 Imports",
    "text": "3 Imports\nFirst we import all the libraries, the default data science libs and the linear model and metrics from sklearn.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#reading-in-the-data",
    "href": "posts/boring_forecast/boring_linear_forecast.html#reading-in-the-data",
    "title": "Boring linear forecast",
    "section": "4 Reading in the data",
    "text": "4 Reading in the data\nFor this example, we will be using a dataset form the prophet package. I have selected this one because, in the prophet documentation, this dataset is used in the section ‚ÄúSeasonality, Holiday Effects, And Regressors‚Äù so it seems fitting to use it, to demonstrate the usefulness of seasonal dummies. The prophet docs describes the dataset in the following way:\n\nAs an example, let‚Äôs look at a time series of the log daily page views for the Wikipedia page for Peyton Manning. We scraped this data using the Wikipedia trend package in R. Peyton Manning provides a nice example because it illustrates some of Prophet‚Äôs features, like multiple seasonality, changing growth rates, and the ability to model special days (such as Manning‚Äôs playoff and Superbowl appearances).\n\n\n\nCode\ndf_in = pd.read_csv(\n    \"https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv\"\n)\ndf_in = df_in.assign(ds=pd.to_datetime(df_in[\"ds\"]))\ndf_in = df_in[(df_in[\"ds\"] &gt; \"2012\")]  # selecting data after 2012\n\n\nIt is always nice to see what we are working with so let us plot the data over time to see what we visually can extract from the plot. we are looking for patterns over time and other behavior and/or pattern that we can exploit.\n\n\nCode\nplt.plot_date(\n    x=df_in[\"ds\"],\n    y=df_in[\"y\"],\n    label=\"input timeseries\",\n    fmt=\"-\",\n)\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"target variable - $y$\")\nplt.title(\"daily visits ot Peyton Manning wiki on a daily basis (log)\")\nplt.show()\n\n\n\n\n\n\n\n\n\nI have selected data from 2012 onwards, this should be enough to test drive the seasonal dummies. The first thing that I notice is that there is a dip around months 06 and 07. In early August teams play so exhibition games before the start of the actual season.\nAlso, we can observe a pattern over the year, it starts high then dips, and then and high again. This can be seen for the other years as well, so there is some repeating seasonality. Let us continue and train our first models. Starting with a simple ordinary linear regression and then adding dummies to see if they improve the performance of the model."
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#train-test-split",
    "href": "posts/boring_forecast/boring_linear_forecast.html#train-test-split",
    "title": "Boring linear forecast",
    "section": "5 Train-test split",
    "text": "5 Train-test split\n\n\nCode\n# train test split\ndf_train = df_in[(df_in[\"ds\"] &gt; \"2012\") & (df_in[\"ds\"] &lt; \"2015\")]\ndf_test = df_in[(df_in[\"ds\"] &gt; \"2015\")]\n\n\nTo gauge the performance of the model the data is split in two parts, the train data from 2012 up to 2015 and the test data everything after 2015. The model will only see the train data and is asked to create a prediction for the test data, after which we will calculate the perfomance with the predictions and the true observations.\n\n\nCode\n# visually inspect the train test split\nplt.plot_date(\n    x=df_train[\"ds\"],\n    y=df_train[\"y\"],\n    label=\"train\",\n    fmt=\"-\",\n)\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=df_test[\"y\"],\n    label=\"test\",\n    fmt=\"-\",\n)\nplt.legend(loc=\"upper right\")\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"$y$\")\nplt.title(\"data is splitted, everything before 2015 is train data after 2015 test\")\nplt.show()"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#setting-up-the-regression",
    "href": "posts/boring_forecast/boring_linear_forecast.html#setting-up-the-regression",
    "title": "Boring linear forecast",
    "section": "6 Setting up the regression",
    "text": "6 Setting up the regression\n\n\nCode\nX_train = df_train[\"ds\"].astype(int).to_numpy().reshape(-1, 1)\ny_train = df_train[\"y\"].to_numpy()\n\nX_test = df_test[\"ds\"].astype(int).to_numpy().reshape(-1, 1)\ny_test = df_test[\"y\"].to_numpy()\n\n\nShaping and converting the data so that we can fit the linear model. In this case, we are converting the date columns into an ever-increasing integer.\n\n\nCode\n# creating, fit, and inference\nlinear = LinearRegression()\nlinear.fit(X=X_train, y=y_train)\ny_pred = linear.predict(X=X_test)\n\n\nFitting the linear model is very fast, around 4 milliseconds on my machine, and yes, I know the data volume is low(actually for time series it is pretty decent), but this allows me to fit 1000 models in 4 seconds. So, we can make predictions on 1000 different time series, all in the time it takes to take a sip of coffee‚òïÔ∏è.\nAnyways lets us visually inspect the results of the model, by plotting all the components (train, test, predictions) that we have gathered. Also, let us calculate two error metrics mse and mae that way we can quantify the performance of the model.\n\n\nCode\n# calc error metrics\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\n\n# visually inspect the prediction\nplt.plot_date(\n    x=df_train[\"ds\"],\n    y=df_train[\"y\"],\n    label=\"train\",\n    fmt=\"-\",\n)\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=df_test[\"y\"],\n    label=\"test\",\n    fmt=\"-\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred,\n    label=\"prediction\",\n    fmt=\"--\",\n)\n\nplt.legend(loc=\"upper right\")\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"$y$\")\nplt.title(f\"linear regression applied (MSE= {mse:.3}, MAE={mae:.3})\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe model is just a boring straight line, but what did you expect with a linear model ?! The green line is passing through the orange blob more or less, and intuitively it kind of moves in the right direction. However, it doesn‚Äôt capture the seasonality or other patterns of the train set. The two error metrics mse and mae are both around 0.6. this in itself does not say much, but we can use this as the ‚Äòbenchmark‚Äô and try to improve on this with the addition of the dummies.\n\n\nmean squared error  = 0.617\nmean absolute error = 0.615"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#adding-dummies",
    "href": "posts/boring_forecast/boring_linear_forecast.html#adding-dummies",
    "title": "Boring linear forecast",
    "section": "7 Adding dummies",
    "text": "7 Adding dummies\nLet us add some dummies for the months and see if we can improve the performance of the model visually and on the metrics. For each month we create a column that can either have the value of 0 or 1. if the value is 1 then that row corresponds to that particular month, in this way we are actively encoding this knowledge into the model. in this way the model can learn the magnitude and direction of each month and apply that to future predictions. at least that is the idea, let us test that!\n\n\nCode\n# creating dummies for the months\ndf_dummies = df_in.assign(\n    month=df_in[\"ds\"].dt.month.astype(\"category\"),\n    ds_int=df_in[\"ds\"].astype(int),\n)\n\nnot_dummy = {\"y\", \"ds\", \"ds_int\"}\nto_dummy = list(set(df_dummies.columns) - not_dummy)\n\ndf_dummies = pd.get_dummies(data=df_dummies, columns=to_dummy)\nall_features = list(set(df_dummies.columns) - {\"y\", \"ds\"})\n\n# slicing the input in train test\ndf_train_dummies = df_dummies[(df_dummies[\"ds\"] &gt; \"2012\") & (df_dummies[\"ds\"] &lt; \"2015\")]\ndf_test_dummies = df_dummies[(df_dummies[\"ds\"] &gt; \"2015\")]\n\nX_train = df_train_dummies.loc[:, all_features]\ny_train = df_train_dummies[[\"y\"]]\n\nX_test = df_test_dummies.loc[:, all_features]\ny_test = df_test_dummies[[\"y\"]]\n\ndf_dummies.drop(columns=[\"ds_int\", \"y\"]).sample(\n    n=6,\n    ignore_index=True,\n    random_state=42,\n)\n\n\n\n\n\n\n\n\n\n\nds\nmonth_1\nmonth_2\nmonth_3\nmonth_4\nmonth_5\nmonth_6\nmonth_7\nmonth_8\nmonth_9\nmonth_10\nmonth_11\nmonth_12\n\n\n\n\n0\n2014-05-06\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\n2012-07-05\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n2\n2015-06-21\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n3\n2012-03-09\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n4\n2012-08-10\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\n5\n2013-05-11\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n\n\n\n\nIn the code block above we are adding the dummies for the month to the data. In this case month_1 is jan and month_12 is dec.\nNext up we are training the model with the added dummies and plotting the results next to the model without the dummies.\n\n\nCode\n# create the pipeline and fit pipeline\n# scaler is there so that the coefs can be interpeted later\n# pipeline = make_pipeline(StandardScaler(), LinearRegression())\npipeline = make_pipeline(MinMaxScaler(), LinearRegression())\n\npipeline.fit(X=X_train, y=y_train)\ny_pred_dummies = pipeline.predict(X=X_test)\n\nmse_dummies = mean_squared_error(y_test, y_pred_dummies)\nmae_dummies = mean_absolute_error(y_test, y_pred_dummies)\n\nplt.plot_date(\n    x=df_train[\"ds\"],\n    y=df_train[\"y\"],\n    label=\"train\",\n    fmt=\"-\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=df_test[\"y\"],\n    label=\"test\",\n    fmt=\"-\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred,\n    label=\"prediction\",\n    fmt=\"--\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred_dummies,\n    label=\"prediction with dummies\",\n    fmt=\"--\",\n)\n\nplt.legend(loc=\"upper right\")\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"$y$\")\nplt.title(\n    f\"linear regression with dummies applied (mse= {mse_dummies:.3}, mae={mae_dummies:.3})\"\n)\nplt.show()\n\n\n\n\n\n\n\n\n\nVisually the forecast already looks a lot better. It follows the peaks and valleys of the time-series, and it captures the overall trend better. this is also reflected when we look at the error metrics and the improvement factor that we have achieved. the mean squared error improved with a factor of 1.89 and the mean absolute error improved with a factor of 1.54. That is impressive for just adding a bunch of ones and zeros.\n\n\nCode\nprint(f\"mean squared error  = {mse_dummies:.3}\")\nprint(f\"improvement factor mse month dummies -&gt; {mse/mse_dummies:.3}x\")\n\nprint(\"-\" * 79)\n\nprint(f\"mean absolute error = {mae_dummies:.3}\")\nprint(f\"improvement factor mea month dummies -&gt; {mae/mae_dummies:.3}x\")\n\n\nmean squared error  = 0.325\nimprovement factor mse month dummies -&gt; 1.9x\n-------------------------------------------------------------------------------\nmean absolute error = 0.4\nimprovement factor mea month dummies -&gt; 1.54x"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#inspecting-the-seasonality",
    "href": "posts/boring_forecast/boring_linear_forecast.html#inspecting-the-seasonality",
    "title": "Boring linear forecast",
    "section": "8 Inspecting the seasonality",
    "text": "8 Inspecting the seasonality\nNow that we have encoded the information about the seasonality in the model, this also allows us to inspect that seasonality by itself. this would give us some insight into the inner workings of the underlying time series model. first we access the coefficients of the linear model and put them into a separate dataframe. then we need to scale them so that the relative difference is more apparent. looking at the raw coefficients would not yield any information as the scale is not relatable to the original problem.\n\n\nCode\n# pull coefs into a seperate df, to inspect the seasonality\nlin_reg_coefs = (\n    pd.DataFrame(\n        data=pipeline[\"linearregression\"].coef_,\n        columns=X_train.columns,\n    )\n    .T.reset_index()\n    .rename(columns={\"index\": \"month\", 0: \"coefficient\"})\n)\n# exclude the time col\nlin_reg_coefs = lin_reg_coefs[lin_reg_coefs[\"month\"] != \"ds_int\"]\n\n# subtract mean to get the relative difference between the coefs\nlin_reg_coefs[\"coefficient\"] = (\n    lin_reg_coefs[\"coefficient\"] - lin_reg_coefs[\"coefficient\"].mean()\n)\n\n\n\n\nCode\nchart = sns.barplot(\n    data=lin_reg_coefs,\n    x=\"month\",\n    y=\"coefficient\",\n    color=sns.color_palette()[0],\n    order=[f\"month_{i}\" for i in range(1, 13)],\n)\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"\")\nplt.title(\"yearly seasonality\")\nplt.show()\n\n\n\n\n\n\n\n\n\nNow we have a beautiful overview of the seasonality over the year. we can clearly see a dip in the middle of the year and a significant uptick in the month of January. in the first week of February, the super bowl is played which is a major factor in the traffic to the wiki page. Also, we noticed that there was a dip in the middle of the year which we can also clearly see at the month_6 mark."
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#recap",
    "href": "posts/boring_forecast/boring_linear_forecast.html#recap",
    "title": "Boring linear forecast",
    "section": "9 Recap",
    "text": "9 Recap\nIn this blog post I have demonstrated that the performance of a simple linear regression for time series forecasting can be improved by a factor of 1.54 up to 1.89 by simply adding dummy variables for the months. the nice thing about this is that the linear regression is available in most systems that have some kind of analytical capability (yes even in excel) and adding the dummies is so simple that you can even do it in a SQL server, the added benefit of this all is that the fitting of the model is quick, therefore you can retrain the model monthly üòâ, weekly, daily, hourly."
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#encore",
    "href": "posts/boring_forecast/boring_linear_forecast.html#encore",
    "title": "Boring linear forecast",
    "section": "10 Encore",
    "text": "10 Encore\nWhat if we were to dummies not just for the months, but also for other datetime features and really turn it up to eleven\n\nLet us create dummies for the following datetime features:\n\nmonth\nweek\ndayofweek\nis_weekend\nquarter\n\nwhen converting this to dummies it will result in a tremendous number of extra features and therefore we will apply a Elasticnet linear model. Usually, this type of model can handle lots of features better than an ordinary linear regression because of the regularization, this will be left as an exercise for the reader.\n\n\nCode\n# creating dummies for the months\ndf_dummies_all = df_in.assign(\n    month=df_in[\"ds\"].dt.month.astype(\"category\"),\n    week=df_in[\"ds\"].dt.isocalendar().week.astype(\"category\"),\n    dayofweek=df_in[\"ds\"].dt.dayofweek.astype(\"category\"),\n    is_weekend=(df_in[\"ds\"].dt.dayofweek) &gt;= 5,\n    quarter=df_in[\"ds\"].dt.quarter.astype(\"category\"),\n    ds_int=df_in[\"ds\"].astype(int),\n)\n\nnot_dummy = {\"y\", \"ds\", \"ds_int\"}\nto_dummy = list(set(df_dummies_all.columns) - not_dummy)\n\ndf_dummies_all = pd.get_dummies(\n    data=df_dummies_all,\n    columns=to_dummy,\n    drop_first=True,  # reduce the amount of cols with no additional info\n)\nall_features = list(set(df_dummies_all.columns) - {\"y\", \"ds\"})\n\n# slicing the input in train test\ndf_train_dummies_all = df_dummies_all[\n    (df_dummies_all[\"ds\"] &gt; \"2012\") & (df_dummies_all[\"ds\"] &lt; \"2015\")\n]\ndf_test_dummies_all = df_dummies_all[(df_dummies_all[\"ds\"] &gt; \"2015\")]\n\nX_train = df_train_dummies_all.loc[:, all_features]\ny_train = df_train_dummies_all[[\"y\"]]\n\nX_test = df_test_dummies_all.loc[:, all_features]\ny_test = df_test_dummies_all[[\"y\"]]\n\ndf_dummies_all.drop(columns=[\"ds_int\", \"y\"]).sample(\n    n=6,\n    ignore_index=True,\n    random_state=42,\n)\n\n\n\n\n\n\n\n\n\n\nds\nweek_2\nweek_3\nweek_4\nweek_5\nweek_6\nweek_7\nweek_8\nweek_9\nweek_10\n...\nmonth_9\nmonth_10\nmonth_11\nmonth_12\ndayofweek_1\ndayofweek_2\ndayofweek_3\ndayofweek_4\ndayofweek_5\ndayofweek_6\n\n\n\n\n0\n2014-05-06\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\n2012-07-05\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\n2\n2015-06-21\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n3\n2012-03-09\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n4\n2012-08-10\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n5\n2013-05-11\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n\n\n6 rows √ó 74 columns\n\n\n\n\n\n\nCode\n# utilzing an elasticnet linear model to compensate for the amount of features\nelastic_params = {\n    \"l1_ratio\": np.linspace(start=0.000001, stop=1, num=100),\n    \"cv\": 7,\n    \"n_alphas\": 1_00,\n    \"n_jobs\": -1,\n}\n\npipeline_all = make_pipeline(MinMaxScaler(), ElasticNetCV(**elastic_params))\n\npipeline_all.fit(X=X_train, y=y_train.to_numpy().ravel())\ny_pred_dummies_all = pipeline_all.predict(X=X_test)\n\nmse_dummies_all = mean_squared_error(y_test, y_pred_dummies_all)\nmae_dummies_all = mean_absolute_error(y_test, y_pred_dummies_all)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=df_test[\"y\"],\n    label=\"test\",\n    fmt=\"-\",\n    alpha=0.7,\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred_dummies,\n    label=\"prediction with dummies\",\n    fmt=\"--\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred_dummies_all,\n    label=\"prediction with all dummies\",\n    fmt=\"--\",\n)\n\n\nplt.legend(loc=\"upper right\")\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"$y$\")\nplt.title(\n    f\"linear regression with dummies applied (mse= {mse_dummies_all:.3}, mae={mae_dummies_all:.3})\"\n)\nplt.show()\n\n\n\n\n\n\n\n\n\nImmediately it becomes obvious that the model captures more of the fine-grained movement of the time series. this is also reflected in the fact that both error metrics have improved.\n\n\nCode\nprint(f\"mean squared error = {mse_dummies_all:.3}\")\nprint(f\"improvement factor mse month dummies -&gt; {mse/mse_dummies:.3}x\")\nprint(f\"improvement factor mse all dummies   -&gt; {mse/mse_dummies_all:.3}x\")\nprint(\"-\" * 79)\n\nprint(f\"mean absolute error = {mae_dummies_all:.3}\")\nprint(f\"improvement factor mea month dummies -&gt; {mae/mae_dummies:.3}x\")\nprint(f\"improvement factor mea all dummies   -&gt; {mae/mae_dummies_all:.3}x\")\n\n\nmean squared error = 0.262\nimprovement factor mse month dummies -&gt; 1.9x\nimprovement factor mse all dummies   -&gt; 2.35x\n-------------------------------------------------------------------------------\nmean absolute error = 0.356\nimprovement factor mea month dummies -&gt; 1.54x\nimprovement factor mea all dummies   -&gt; 1.73x"
  },
  {
    "objectID": "posts/DPD/dependency.html",
    "href": "posts/DPD/dependency.html",
    "title": "pooking and looking üëÄ",
    "section": "",
    "text": "generate data\ntrain rf\ncreate pdp, and determine monotonic relations\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nfrom sklearn.datasets import make_friedman1\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.inspection import PartialDependenceDisplay, partial_dependence\nCode\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nCode\n# setting global plotting settings\n# roudning all floats to two digits\npd.options.display.float_format = \"{:.2f}\".format\n\nset_matplotlib_formats(\"svg\")\nsns.set_context(context=\"notebook\", font_scale=1.5)\nsns.set_palette(\"tab10\")\nsns.set_style(\"darkgrid\")\nFIGSIZE = (12, 6)\nRANDOM_STATE = 35"
  },
  {
    "objectID": "posts/DPD/dependency.html#intro",
    "href": "posts/DPD/dependency.html#intro",
    "title": "pooking and looking üëÄ",
    "section": "1 Intro",
    "text": "1 Intro\nToday, we‚Äôre examining partial dependence plots, a tool for visualizing the average influence of a feature on a model‚Äôs predictions.\n#TODO why would we want to see a partial dependece plot\nTo demonstrate this, we‚Äôll utilize a dataset from Scikit-learn, which can be found here.\nThe formula generating the synthetic dataset is as follows: \\(y(X) = 10\\sin(\\pi \\cdot X_0 \\cdot X_1) + 20 \\cdot (X_2 - 0.5)^2 + 10 \\cdot X_3 + 5 \\cdot X_4 + \\text{noise} \\cdot N(0, 1)\\).\nI will generate a dataset comprising 7 features, but only 5 will actually influence the output‚Äîmeaning the remaining two have no predictive value. the generate dataset contains 2000 samples and has a noise factor of 2.\n\n\nCode\nX_reg, y_reg = make_friedman1(\n    n_samples=2_000, n_features=7, noise=2, random_state=RANDOM_STATE\n)\n\n# stick it into a dataframe\ndf_reg = pd.concat(\n    [\n        pd.DataFrame(\n            data=X_reg, columns=[\"x_0\", \"x_1\", \"x_2\", \"x_3\", \"x_4\", \"x_5\", \"x_6\"]\n        ),\n        pd.DataFrame(data=y_reg, columns=[\"target\"]),\n    ],\n    axis=1,\n)\n\n# display descriptive stats\ndf_reg.describe().T\n\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nx_0\n2000.00\n0.49\n0.29\n0.00\n0.25\n0.49\n0.74\n1.00\n\n\nx_1\n2000.00\n0.50\n0.29\n0.00\n0.25\n0.51\n0.76\n1.00\n\n\nx_2\n2000.00\n0.50\n0.29\n0.00\n0.25\n0.52\n0.75\n1.00\n\n\nx_3\n2000.00\n0.50\n0.28\n0.00\n0.26\n0.51\n0.75\n1.00\n\n\nx_4\n2000.00\n0.50\n0.29\n0.00\n0.25\n0.50\n0.75\n1.00\n\n\nx_5\n2000.00\n0.50\n0.29\n0.00\n0.24\n0.49\n0.75\n1.00\n\n\nx_6\n2000.00\n0.50\n0.28\n0.00\n0.26\n0.51\n0.75\n1.00\n\n\ntarget\n2000.00\n14.48\n5.26\n-1.56\n10.72\n14.46\n18.15\n30.51\n\n\n\n\n\n\n\n\nall input features are uniform distributed \\(U(0,1)\\) -&gt; the mean is ~0.5 the target feature has a higher mean of ~14\nThe data is fed into a random-forest model, it is my favorite go to model, no feature scaling required can handle missing values, can capture non-linearity, has ability to model non-linearity, and fitting can be quite fast.\n\n\nCode\nX = df_reg.drop(columns=\"target\")\ny = df_reg[\"target\"]\n\nreg = RandomForestRegressor(\n    n_estimators=32,\n    max_depth=9,\n    min_samples_split=2,\n    random_state=42,\n)\n_ = reg.fit(X, y)\n\n\nto determine the partial dependence (PD) of each feature on the target we need to do some dataset wrangling. lets start with a (very very small) subset of our data taken at random.\n\n\nCode\ndf_sample = df_reg.sample(3, random_state=1)\ndf_sample\n\n\n\n\n\n\n\n\n\n\nx_0\nx_1\nx_2\nx_3\nx_4\nx_5\nx_6\ntarget\n\n\n\n\n674\n0.36\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n\n\n1699\n0.32\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n\n\n1282\n0.31\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57"
  },
  {
    "objectID": "posts/DPD/dependency.html#how-to-calculate-the-pdp",
    "href": "posts/DPD/dependency.html#how-to-calculate-the-pdp",
    "title": "pooking and looking üëÄ",
    "section": "2 how to calculate the PDP",
    "text": "2 how to calculate the PDP\nIn order to calculate the PD of lets say x_0 we would need to follow these steps: 1. determine the range of x_0 2. set a grid size, i.e the sampling ratio over the range 3. apply the grid over the data, this will increase the data size by a lot 4. predict with the model using the newly created dataset 5. average out the individual predictions to get a singular result\n\nrange of x_0 is between 0 and 1\nlets use a grid size of 7, that means that we create a list of 7 equaly space values between 0 and 1\nfor each sample in our dataset we apply the grid of 7 values which means that if we have 3 datapoints to begin we end up with 3*7=21 datapoints. that is an increase in data and for bigger data sets and finer grids this increases very fast\nnow we ask the model to make predictions, this is inference and not training so the computational cost is reasonable\nperform a group by on the sampled grid and apply a average aggregation function\nthe result is the partial dependence of x_0 and the target variable\n\n\n2.1 determine the range of x_0\n\n\nCode\ndf_reg[\"x_0\"].agg([\"min\", \"max\"])\n\n\nmin   0.00\nmax   1.00\nName: x_0, dtype: float64\n\n\nthe range of x_0 is between zero and one, in this case we are taking the entire region but you could also restrict it to the 90% percentile.\n\n\n2.2 set a grid size, i.e the sampling ratio over the range\nIn this case a rather small grid size of 7 is chosen. that means over the range of 0 to 1 we select 7 equaly spaced datapoints\n\n\n2.3 apply the grid over the data\nby utilizing the np.linspace() function we can easily create the grid, and create the required dataset with a cross join. for the people that know cross joins blow up your data pretty fast as it scales quadraticly. so our initial 3 datapoints together with the grid size increase the data count to $ 3 * 7 = 21 $ the newly created column is the feature for which we want to calculate the pd, in this case x_0_sample\n\n\nCode\ndf_pdp = df_sample.drop(columns=\"x_0\")\ndf_sample_grid = pd.Series(np.linspace(0, 1, 7), name=\"x_0_sample\").round(2)\ndf_pdp = df_pdp.join(other=df_sample_grid, how=\"cross\")\ndf_pdp\n\n\n\n\n\n\n\n\n\n\nx_1\nx_2\nx_3\nx_4\nx_5\nx_6\ntarget\nx_0_sample\n\n\n\n\n0\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.00\n\n\n1\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.17\n\n\n2\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.33\n\n\n3\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.50\n\n\n4\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.67\n\n\n5\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.83\n\n\n6\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n1.00\n\n\n7\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.00\n\n\n8\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.17\n\n\n9\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.33\n\n\n10\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.50\n\n\n11\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.67\n\n\n12\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.83\n\n\n13\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n1.00\n\n\n14\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.00\n\n\n15\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.17\n\n\n16\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.33\n\n\n17\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.50\n\n\n18\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.67\n\n\n19\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.83\n\n\n20\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n1.00\n\n\n\n\n\n\n\n\n\n\n2.4 predict with the model\nfor our new dataset we ask the model to make a prediction for each observations, so the original model is asked to create a predictions for each of the newly created 21 data points.\n\n\nCode\ndf_pdp = df_pdp.assign(\n    y_pred=reg.predict(\n        df_pdp.loc[\n            :, [\"x_0_sample\", \"x_1\", \"x_2\", \"x_3\", \"x_4\", \"x_5\", \"x_6\"]\n        ].to_numpy()\n    )\n)\ndf_pdp\n\n\n\n\n\n\n\n\n\n\nx_1\nx_2\nx_3\nx_4\nx_5\nx_6\ntarget\nx_0_sample\ny_pred\n\n\n\n\n0\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.00\n5.23\n\n\n1\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.17\n9.61\n\n\n2\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.33\n12.19\n\n\n3\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.50\n12.58\n\n\n4\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.67\n12.72\n\n\n5\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n0.83\n12.66\n\n\n6\n0.70\n0.83\n0.03\n0.26\n0.53\n0.61\n12.79\n1.00\n12.79\n\n\n7\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.00\n5.76\n\n\n8\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.17\n9.31\n\n\n9\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.33\n9.89\n\n\n10\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.50\n11.27\n\n\n11\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.67\n11.67\n\n\n12\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n0.83\n11.60\n\n\n13\n0.70\n0.38\n0.02\n0.38\n0.40\n0.14\n8.29\n1.00\n11.86\n\n\n14\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.00\n6.65\n\n\n15\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.17\n6.97\n\n\n16\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.33\n7.73\n\n\n17\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.50\n9.19\n\n\n18\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.67\n9.91\n\n\n19\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n0.83\n10.83\n\n\n20\n0.21\n0.66\n0.40\n0.27\n0.11\n0.84\n7.57\n1.00\n10.82\n\n\n\n\n\n\n\n\n\n\n2.5 average out the individual predictions\nthe next step is the aggregate the results by taking the average. this is achieved by taking the columns x_0_sample , y_pred and grouping by x_0_sample and applying mean aggregation.\n\n\nCode\ndf_pdp_plot = (\n    df_pdp[[\"x_0_sample\", \"y_pred\"]].groupby(\"x_0_sample\", as_index=False).mean()\n)\ndf_pdp_plot\n\n\n\n\n\n\n\n\n\n\nx_0_sample\ny_pred\n\n\n\n\n0\n0.00\n5.88\n\n\n1\n0.17\n8.63\n\n\n2\n0.33\n9.94\n\n\n3\n0.50\n11.01\n\n\n4\n0.67\n11.43\n\n\n5\n0.83\n11.70\n\n\n6\n1.00\n11.82\n\n\n\n\n\n\n\n\nthis is the dataframe that shows the average dependence of the target variable with respect to the feature x_0 in this case. increasing the value of x_0 also yields an increase of the target variable. as can be seen in the plot below. however keep in mind that this is done with a subset of the data on a very coarse grid. if more samples are included and the size of the grid is increased a more detailed dependence will emerge.\n\n\nCode\n_, ax = plt.subplots(1, 1, figsize=FIGSIZE)\nax.plot(df_pdp_plot[\"x_0_sample\"], df_pdp_plot[\"y_pred\"])\nax.set_xlabel(\"$x_0$\")\nax.set_ylabel(\"target\")\nax.set_title(\"partial dependence of $x_0$ on the target variable\")\nplt.show()\n\n\n\n\n\n\n\n\n\nthe plot above shows that the response of the model is postive with respect to an increase in the value of feature x_0 however this is done with just three datapoints,If we use the full dataset of 2000 samples and a sampling grid of 127 that would result in a final dataset of \\(2000 * 128 = 256.000\\) samples. yikes that explodes fast and this is just for one feature. however we do have the ability to get a more accurate picture of the partial dependece of the x_0 variable.\nbelow you can see the code, i placed two comments to indicate where the changes have been made.\n\n\nCode\ndf_pdp = df_reg.drop(columns=\"x_0\")  # &lt;- the full dataset\ndf_sample_grid = pd.Series(\n    np.linspace(0, 1, 128),  # &lt;- sampling is 128\n    name=\"x_0_sample\",\n)\ndf_pdp = df_pdp.join(other=df_sample_grid, how=\"cross\")\n\ndf_pdp = df_pdp.assign(\n    y_pred=reg.predict(\n        df_pdp.loc[\n            :, [\"x_0_sample\", \"x_1\", \"x_2\", \"x_3\", \"x_4\", \"x_5\", \"x_6\"]\n        ].to_numpy()\n    )\n)\n\ndf_pdp_plot_full = (\n    df_pdp[[\"x_0_sample\", \"y_pred\"]].groupby(\"x_0_sample\", as_index=False).mean()\n)\n\n_, ax = plt.subplots(1, 1, figsize=FIGSIZE)\nax.plot(df_pdp_plot_full[\"x_0_sample\"], df_pdp_plot_full[\"y_pred\"])\nax.set_xlabel(\"$x_0$\")\nax.set_ylabel(\"target\")\nax.set_title(\"partial dependence of $x_0$ on the target variable\")\nplt.show()\n\n\n\n\n\n\n\n\n\nthe same picture as before emerges however this time it includes a little more detail, an increaase in x_0 also yields an increase in the target variable to an almost monotonic level."
  },
  {
    "objectID": "posts/DPD/dependency.html#scikit-learn-implementation",
    "href": "posts/DPD/dependency.html#scikit-learn-implementation",
    "title": "pooking and looking üëÄ",
    "section": "3 Scikit-learn implementation",
    "text": "3 Scikit-learn implementation\nin practise we would not code our own PDP routinge but first look if there already is a lib that does the job and scikit-learn has an implementation of a partial dependence and also the SHAP packages has a PDP option, super handy if you are already using it to get shapley values.\n\n3.1 one-way partial dependence\nby using the scikit-learn function we can easily create plots for our entire dataset. it is just with a one-liner üòä.\n\n\nCode\n_, ax = plt.subplots(1, 1, figsize=(12, 16))\n\nPartialDependenceDisplay.from_estimator(\n    estimator=reg, X=X, features=range(0, 7), grid_resolution=128, kind=\"average\", ax=ax\n)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nfor the plot above we can clearly see that x_6 and x_5 do not meaningfully contribute to the output of the model. so changes one of those two will not change the predicted target value. this is also logical because these two features are random noise. x_2 has the shape of a bathtub and the mean of 0.5 yields the lowest target outcome. x_0 and x_1 show a steady monotonic increase and plateau for the higher input values, after which the impact on the target is diminished. for the remaining two features x_3 and x_4 show that an increase in the feature yields a higher outcome of the target, also a big jump in output can be seen at around 0.4 for x_3 adn 0.6 for x_4\n\n\n3.2 two-way partial dependence\nIt is possible to adapt this approach and get the PDP of two features with respect to the target variable. the trick is to create a sample grid that is the product of the two features. but again this will increase the number of datapoints that need to be inferenced. however now you can obtain insights into the feature interactions and the results it has on the target variable.\n\n\nCode\n_, ax = plt.subplots(1, 1, figsize=FIGSIZE)\n\nPartialDependenceDisplay.from_estimator(\n    reg, X, features=[(1, 2)], grid_resolution=128, ax=ax\n)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/DPD/dependency.html#bonus-individual-conditional-expectation",
    "href": "posts/DPD/dependency.html#bonus-individual-conditional-expectation",
    "title": "pooking and looking üëÄ",
    "section": "4 Bonus: Individual Conditional Expectation",
    "text": "4 Bonus: Individual Conditional Expectation\ninstead of performing a aggregation and plotting the result, theinndividual observations can alos be used. in the plot each blue line is an original observation were the value of x_3 has taken over by the sampling grid. this allows you to inspect the individual datapoints. in this case we have a well beheaved dataset were all points are in agreement however this plot might give you some insights if performance is lacking for a couple of datapoints. it well may be that if the feature values is increased the target value goes up for one group and goes down for another group.\n\n\nCode\n_, ax = plt.subplots(1, 1, figsize=(12, 9))\n\nidx = np.random.randint(len(X), size=int(len(X) * 0.1), dtype=int)\n\n\nPartialDependenceDisplay.from_estimator(\n    reg, X.loc[idx, :], features=[3], kind=\"both\", grid_resolution=128, ax=ax\n)\nax.set_title(\"Individual Condition Expectation\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n### gif\n\n\n\n\nCode\nimport gif  # noqa E402\n\n\n\n\nCode\nidx = np.random.randint(len(X), size=int(len(X) * 0.025), dtype=int)\n\n\npdp_results = partial_dependence(\n    estimator=reg,\n    X=X.loc[idx, :],\n    features=[\"x_3\"],\n    grid_resolution=33,\n    kind=\"both\",\n)\n\nplt.plot(\n    pdp_results[\"individual\"][0].T,\n    linestyle=\"-\",\n    linewidth=0.25,\n    alpha=0.33,\n    color=\"tab:blue\",\n)\nplt.plot(\n    np.mean(pdp_results[\"individual\"][0].T, axis=1), linestyle=\"--\", color=\"tab:orange\"\n);\n\n\n\n\n\n\n\n\n\n\n\nCode\nindividual_lines = pdp_results[\"individual\"][0].T\n\n\n_, ax = plt.subplots(1, 1, figsize=FIGSIZE)\n\n\nax.plot(\n    pdp_results[\"grid_values\"][0],\n    individual_lines[:, 0],\n    linestyle=\"-\",\n    linewidth=0.5,\n    alpha=0.5,\n    color=\"tab:blue\",\n)\n\n\nxlim_begin, ylim_begin = ax.get_xlim(), ax.get_ylim()\n\n\nax.plot(\n    pdp_results[\"grid_values\"][0],\n    individual_lines[:, :],\n    linestyle=\"-\",\n    linewidth=0.5,\n    alpha=0.5,\n    color=\"tab:blue\",\n)\n\nxlim_end, ylim_end = ax.get_xlim(), ax.get_ylim()\n\nzoom_factor = 0\n# get the global axes limits\noveral_xlim = (\n    min(xlim_begin[0], xlim_end[0]) * (1 - zoom_factor),\n    max(xlim_begin[1], xlim_end[1]) * (1 + zoom_factor),\n)\noveral_ylim = (\n    min(ylim_begin[0], ylim_end[0]) * (1 - zoom_factor),\n    max(ylim_begin[1], ylim_end[1]) * (1 + zoom_factor),\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# for i in range(individual_lines.shape[1])\n\n\n@gif.frame\ndef one_frame(i: int, overal_xlim=None, overal_ylim=None) -&gt; None:\n    _, ax = plt.subplots(1, 1, figsize=FIGSIZE)\n\n    ax.plot(\n        pdp_results[\"grid_values\"][0],\n        individual_lines[:, :i],\n        linestyle=\"-\",\n        linewidth=0.75,\n        alpha=0.35,\n        color=\"tab:blue\",\n    )\n\n    if i &gt; 1:\n        ax.plot(\n            pdp_results[\"grid_values\"][0],\n            np.mean(individual_lines[:, :i], axis=1),\n            linestyle=\"--\",\n            linewidth=3,\n            color=\"tab:orange\",\n        )\n\n    # set the overal axes\n    ax.set_xlim(overal_xlim), ax.set_ylim(overal_ylim)\n\n    # remove the ticks and lables from the axes\n    xticks = ax.get_xticks()\n    ax.set_xticks(xticks, labels=[])\n    ax.set_xlabel(\"\")\n\n    yticks = ax.get_yticks()\n    ax.set_yticks(yticks, labels=[])\n    ax.set_ylabel(\"\")\n\n    plt.tight_layout()\n\n\n\n\nCode\n# genearate all base frames\ngif_frames = [\n    one_frame(i, overal_xlim, overal_ylim) for i in range(individual_lines.shape[1])\n]\n\n\n\n\nCode\n# add bounce and freeze point\ngif_frames.extend([gif_frames[-1] for _ in range(60)])\ngif_frames.extend(gif_frames[::-1])\n\n\n\n\nCode\ngif.save(gif_frames, \"artifacts/ice_lines.gif\", duration=1)"
  },
  {
    "objectID": "whois.html",
    "href": "whois.html",
    "title": "whois ü§ñ",
    "section": "",
    "text": "Machine Learning Scientist ü§ñ\nloves to puzzle üß©\nAmsterdam area üá≥üá±üá™üá∫"
  },
  {
    "objectID": "whois.html#whois",
    "href": "whois.html#whois",
    "title": "whois ü§ñ",
    "section": "",
    "text": "Machine Learning Scientist ü§ñ\nloves to puzzle üß©\nAmsterdam area üá≥üá±üá™üá∫"
  }
]