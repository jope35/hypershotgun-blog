[
  {
    "objectID": "whois.html",
    "href": "whois.html",
    "title": "whois ü§ñ",
    "section": "",
    "text": "Machine Learning Scientist ü§ñ\nloves to puzzle üß©\nAmsterdam area üá≥üá±üá™üá∫"
  },
  {
    "objectID": "whois.html#whois",
    "href": "whois.html#whois",
    "title": "whois ü§ñ",
    "section": "",
    "text": "Machine Learning Scientist ü§ñ\nloves to puzzle üß©\nAmsterdam area üá≥üá±üá™üá∫"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html",
    "href": "posts/boring_forecast/boring_linear_forecast.html",
    "title": "Boring linear forecast",
    "section": "",
    "text": "Linear regression in itself is not performant for longer time-scales\nMost systems have some capabilities for linear regression built-in\nAdding dummy variables for datetime features(i.e.¬†month, weekday etc.) adds predictive power"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#tldr",
    "href": "posts/boring_forecast/boring_linear_forecast.html#tldr",
    "title": "Boring linear forecast",
    "section": "",
    "text": "Linear regression in itself is not performant for longer time-scales\nMost systems have some capabilities for linear regression built-in\nAdding dummy variables for datetime features(i.e.¬†month, weekday etc.) adds predictive power"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#introduction",
    "href": "posts/boring_forecast/boring_linear_forecast.html#introduction",
    "title": "Boring linear forecast",
    "section": "2 Introduction",
    "text": "2 Introduction\nLinear regression is a statistical model that can be used to determine the linear relationship between variables, most of the time this is seen as a beginners model that is not particularly useful, and most of the time it is discarded and replaced by a shiny neural net or a fancy gradient-boosted model.\nthe nice feature of linear regression is that the direction and magnitude of the relationship can be estimated with the help of linear regression. It is used in many fields including but not limited to Economics, Finance, Social science, etc. The popularity of this model is model is likely due to the fact that most systems have built-in functionality that enables the training of linear models, they are also very cheap/fast to train, and one can also determine that the model has optimal parameters. all these features make linear regression an excellent model to start with.\nTo extend the capabilities of the linear model for time series forecasting, dummy variables can be utilized. These dummies can provide additional information about the relationship over time, can help the model to identify seasonality over time, and also gauge the effect of one-off events, examples are price reductions or natural disasters.\nFor instance, we can create a dummy to identify certain datetime features such as what the month is or whether a particular day is a weekday or a weekend."
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#imports",
    "href": "posts/boring_forecast/boring_linear_forecast.html#imports",
    "title": "Boring linear forecast",
    "section": "3 Imports",
    "text": "3 Imports\nFirst we import all the libraries, the default data science libs and the linear model and metrics from sklearn.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#reading-in-the-data",
    "href": "posts/boring_forecast/boring_linear_forecast.html#reading-in-the-data",
    "title": "Boring linear forecast",
    "section": "4 Reading in the data",
    "text": "4 Reading in the data\nFor this example, we will be using a dataset form the prophet package. I have selected this one because, in the prophet documentation, this dataset is used in the section ‚ÄúSeasonality, Holiday Effects, And Regressors‚Äù so it seems fitting to use it, to demonstrate the usefulness of seasonal dummies. The prophet docs describes the dataset in the following way:\n\nAs an example, let‚Äôs look at a time series of the log daily page views for the Wikipedia page for Peyton Manning. We scraped this data using the Wikipedia trend package in R. Peyton Manning provides a nice example because it illustrates some of Prophet‚Äôs features, like multiple seasonality, changing growth rates, and the ability to model special days (such as Manning‚Äôs playoff and Superbowl appearances).\n\n\n\nCode\ndf_in = pd.read_csv(\n    \"https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv\"\n)\ndf_in = df_in.assign(ds=pd.to_datetime(df_in[\"ds\"]))\ndf_in = df_in[(df_in[\"ds\"] &gt; \"2012\")]  # selecting data after 2012\n\n\nIt is always nice to see what we are working with so let us plot the data over time to see what we visually can extract from the plot. we are looking for patterns over time and other behavior and/or pattern that we can exploit.\n\n\nCode\nplt.plot_date(\n    x=df_in[\"ds\"],\n    y=df_in[\"y\"],\n    label=\"input timeseries\",\n    fmt=\"-\",\n)\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"target variable - $y$\")\nplt.title(\"daily visits ot Peyton Manning wiki on a daily basis (log)\")\nplt.show()\n\n\n\n\n\n\n\n\n\nI have selected data from 2012 onwards, this should be enough to test drive the seasonal dummies. The first thing that I notice is that there is a dip around months 06 and 07. In early August teams play so exhibition games before the start of the actual season.\nAlso, we can observe a pattern over the year, it starts high then dips, and then and high again. This can be seen for the other years as well, so there is some repeating seasonality. Let us continue and train our first models. Starting with a simple ordinary linear regression and then adding dummies to see if they improve the performance of the model."
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#train-test-split",
    "href": "posts/boring_forecast/boring_linear_forecast.html#train-test-split",
    "title": "Boring linear forecast",
    "section": "5 Train-test split",
    "text": "5 Train-test split\n\n\nCode\n# train test split\ndf_train = df_in[(df_in[\"ds\"] &gt; \"2012\") & (df_in[\"ds\"] &lt; \"2015\")]\ndf_test = df_in[(df_in[\"ds\"] &gt; \"2015\")]\n\n\nTo gauge the performance of the model the data is split in two parts, the train data from 2012 up to 2015 and the test data everything after 2015. The model will only see the train data and is asked to create a prediction for the test data, after which we will calculate the perfomance with the predictions and the true observations.\n\n\nCode\n# visually inspect the train test split\nplt.plot_date(\n    x=df_train[\"ds\"],\n    y=df_train[\"y\"],\n    label=\"train\",\n    fmt=\"-\",\n)\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=df_test[\"y\"],\n    label=\"test\",\n    fmt=\"-\",\n)\nplt.legend(loc=\"upper right\")\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"$y$\")\nplt.title(\"data is splitted, everything before 2015 is train data after 2015 test\")\nplt.show()"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#setting-up-the-regression",
    "href": "posts/boring_forecast/boring_linear_forecast.html#setting-up-the-regression",
    "title": "Boring linear forecast",
    "section": "6 Setting up the regression",
    "text": "6 Setting up the regression\n\n\nCode\nX_train = df_train[\"ds\"].astype(int).to_numpy().reshape(-1, 1)\ny_train = df_train[\"y\"].to_numpy()\n\nX_test = df_test[\"ds\"].astype(int).to_numpy().reshape(-1, 1)\ny_test = df_test[\"y\"].to_numpy()\n\n\nShaping and converting the data so that we can fit the linear model. In this case, we are converting the date columns into an ever-increasing integer.\n\n\nCode\n# creating, fit, and inference\nlinear = LinearRegression()\nlinear.fit(X=X_train, y=y_train)\ny_pred = linear.predict(X=X_test)\n\n\nFitting the linear model is very fast, around 4 milliseconds on my machine, and yes, I know the data volume is low(actually for time series it is pretty decent), but this allows me to fit 1000 models in 4 seconds. So, we can make predictions on 1000 different time series, all in the time it takes to take a sip of coffee‚òïÔ∏è.\nAnyways lets us visually inspect the results of the model, by plotting all the components (train, test, predictions) that we have gathered. Also, let us calculate two error metrics mse and mae that way we can quantify the performance of the model.\n\n\nCode\n# calc error metrics\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\n\n# visually inspect the prediction\nplt.plot_date(\n    x=df_train[\"ds\"],\n    y=df_train[\"y\"],\n    label=\"train\",\n    fmt=\"-\",\n)\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=df_test[\"y\"],\n    label=\"test\",\n    fmt=\"-\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred,\n    label=\"prediction\",\n    fmt=\"--\",\n)\n\nplt.legend(loc=\"upper right\")\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"$y$\")\nplt.title(f\"linear regression applied (MSE= {mse:.3}, MAE={mae:.3})\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe model is just a boring straight line, but what did you expect with a linear model ?! The green line is passing through the orange blob more or less, and intuitively it kind of moves in the right direction. However, it doesn‚Äôt capture the seasonality or other patterns of the train set. The two error metrics mse and mae are both around 0.6. this in itself does not say much, but we can use this as the ‚Äòbenchmark‚Äô and try to improve on this with the addition of the dummies.\n\n\nmean squared error  = 0.617\nmean absolute error = 0.615"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#adding-dummies",
    "href": "posts/boring_forecast/boring_linear_forecast.html#adding-dummies",
    "title": "Boring linear forecast",
    "section": "7 Adding dummies",
    "text": "7 Adding dummies\nLet us add some dummies for the months and see if we can improve the performance of the model visually and on the metrics. For each month we create a column that can either have the value of 0 or 1. if the value is 1 then that row corresponds to that particular month, in this way we are actively encoding this knowledge into the model. in this way the model can learn the magnitude and direction of each month and apply that to future predictions. at least that is the idea, let us test that!\n\n\nCode\n# creating dummies for the months\ndf_dummies = df_in.assign(\n    month=df_in[\"ds\"].dt.month.astype(\"category\"),\n    ds_int=df_in[\"ds\"].astype(int),\n)\n\nnot_dummy = {\"y\", \"ds\", \"ds_int\"}\nto_dummy = list(set(df_dummies.columns) - not_dummy)\n\ndf_dummies = pd.get_dummies(data=df_dummies, columns=to_dummy)\nall_features = list(set(df_dummies.columns) - {\"y\", \"ds\"})\n\n# slicing the input in train test\ndf_train_dummies = df_dummies[(df_dummies[\"ds\"] &gt; \"2012\") & (df_dummies[\"ds\"] &lt; \"2015\")]\ndf_test_dummies = df_dummies[(df_dummies[\"ds\"] &gt; \"2015\")]\n\nX_train = df_train_dummies.loc[:, all_features]\ny_train = df_train_dummies[[\"y\"]]\n\nX_test = df_test_dummies.loc[:, all_features]\ny_test = df_test_dummies[[\"y\"]]\n\ndf_dummies.drop(columns=[\"ds_int\", \"y\"]).sample(\n    n=6,\n    ignore_index=True,\n    random_state=42,\n)\n\n\n\n\n\n\n\n\n\nds\nmonth_1\nmonth_2\nmonth_3\nmonth_4\nmonth_5\nmonth_6\nmonth_7\nmonth_8\nmonth_9\nmonth_10\nmonth_11\nmonth_12\n\n\n\n\n0\n2014-05-06\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\n2012-07-05\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n2\n2015-06-21\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n3\n2012-03-09\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n4\n2012-08-10\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\n5\n2013-05-11\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n\n\n\nIn the code block above we are adding the dummies for the month to the data. In this case month_1 is jan and month_12 is dec.\nNext up we are training the model with the added dummies and plotting the results next to the model without the dummies.\n\n\nCode\n# create the pipeline and fit pipeline\n# scaler is there so that the coefs can be interpeted later\n# pipeline = make_pipeline(StandardScaler(), LinearRegression())\npipeline = make_pipeline(MinMaxScaler(), LinearRegression())\n\npipeline.fit(X=X_train, y=y_train)\ny_pred_dummies = pipeline.predict(X=X_test)\n\nmse_dummies = mean_squared_error(y_test, y_pred_dummies)\nmae_dummies = mean_absolute_error(y_test, y_pred_dummies)\n\nplt.plot_date(\n    x=df_train[\"ds\"],\n    y=df_train[\"y\"],\n    label=\"train\",\n    fmt=\"-\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=df_test[\"y\"],\n    label=\"test\",\n    fmt=\"-\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred,\n    label=\"prediction\",\n    fmt=\"--\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred_dummies,\n    label=\"prediction with dummies\",\n    fmt=\"--\",\n)\n\nplt.legend(loc=\"upper right\")\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"$y$\")\nplt.title(\n    f\"linear regression with dummies applied (mse= {mse_dummies:.3}, mae={mae_dummies:.3})\"\n)\nplt.show()\n\n\n\n\n\n\n\n\n\nVisually the forecast already looks a lot better. It follows the peaks and valleys of the time-series, and it captures the overall trend better. this is also reflected when we look at the error metrics and the improvement factor that we have achieved. the mean squared error improved with a factor of 1.89 and the mean absolute error improved with a factor of 1.54. That is impressive for just adding a bunch of ones and zeros.\n\n\nCode\nprint(f\"mean squared error  = {mse_dummies:.3}\")\nprint(f\"improvement factor mse month dummies -&gt; {mse/mse_dummies:.3}x\")\n\nprint(\"-\" * 79)\n\nprint(f\"mean absolute error = {mae_dummies:.3}\")\nprint(f\"improvement factor mea month dummies -&gt; {mae/mae_dummies:.3}x\")\n\n\nmean squared error  = 0.32\nimprovement factor mse month dummies -&gt; 1.93x\n-------------------------------------------------------------------------------\nmean absolute error = 0.394\nimprovement factor mea month dummies -&gt; 1.56x"
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#inspecting-the-seasonality",
    "href": "posts/boring_forecast/boring_linear_forecast.html#inspecting-the-seasonality",
    "title": "Boring linear forecast",
    "section": "8 Inspecting the seasonality",
    "text": "8 Inspecting the seasonality\nNow that we have encoded the information about the seasonality in the model, this also allows us to inspect that seasonality by itself. this would give us some insight into the inner workings of the underlying time series model. first we access the coefficients of the linear model and put them into a separate dataframe. then we need to scale them so that the relative difference is more apparent. looking at the raw coefficients would not yield any information as the scale is not relatable to the original problem.\n\n\nCode\n# pull coefs into a seperate df, to inspect the seasonality\nlin_reg_coefs = (\n    pd.DataFrame(\n        data=pipeline[\"linearregression\"].coef_,\n        columns=X_train.columns,\n    )\n    .T.reset_index()\n    .rename(columns={\"index\": \"month\", 0: \"coefficient\"})\n)\n# exclude the time col\nlin_reg_coefs = lin_reg_coefs[lin_reg_coefs[\"month\"] != \"ds_int\"]\n\n# subtract mean to get the relative difference between the coefs\nlin_reg_coefs[\"coefficient\"] = (\n    lin_reg_coefs[\"coefficient\"] - lin_reg_coefs[\"coefficient\"].mean()\n)\n\n\n\n\nCode\nchart = sns.barplot(\n    data=lin_reg_coefs,\n    x=\"month\",\n    y=\"coefficient\",\n    color=sns.color_palette()[0],\n    order=[f\"month_{i}\" for i in range(1, 13)],\n)\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"\")\nplt.title(\"yearly seasonality\")\nplt.show()\n\n\n\n\n\n\n\n\n\nNow we have a beautiful overview of the seasonality over the year. we can clearly see a dip in the middle of the year and a significant uptick in the month of January. in the first week of February, the super bowl is played which is a major factor in the traffic to the wiki page. Also, we noticed that there was a dip in the middle of the year which we can also clearly see at the month_6 mark."
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#recap",
    "href": "posts/boring_forecast/boring_linear_forecast.html#recap",
    "title": "Boring linear forecast",
    "section": "9 Recap",
    "text": "9 Recap\nIn this blog post I have demonstrated that the performance of a simple linear regression for time series forecasting can be improved by a factor of 1.54 up to 1.89 by simply adding dummy variables for the months. the nice thing about this is that the linear regression is available in most systems that have some kind of analytical capability (yes even in excel) and adding the dummies is so simple that you can even do it in a SQL server, the added benefit of this all is that the fitting of the model is quick, therefore you can retrain the model monthly üòâ, weekly, daily, hourly."
  },
  {
    "objectID": "posts/boring_forecast/boring_linear_forecast.html#encore",
    "href": "posts/boring_forecast/boring_linear_forecast.html#encore",
    "title": "Boring linear forecast",
    "section": "10 Encore",
    "text": "10 Encore\nWhat if we were to dummies not just for the months, but also for other datetime features and really turn it up to eleven\n\nLet us create dummies for the following datetime features:\n\nmonth\nweek\ndayofweek\nis_weekend\nquarter\n\nwhen converting this to dummies it will result in a tremendous number of extra features and therefore we will apply a Elasticnet linear model. Usually, this type of model can handle lots of features better than an ordinary linear regression because of the regularization, this will be left as an exercise for the reader.\n\n\nCode\n# creating dummies for the months\ndf_dummies_all = df_in.assign(\n    month=df_in[\"ds\"].dt.month.astype(\"category\"),\n    week=df_in[\"ds\"].dt.isocalendar().week.astype(\"category\"),\n    dayofweek=df_in[\"ds\"].dt.dayofweek.astype(\"category\"),\n    is_weekend=(df_in[\"ds\"].dt.dayofweek) &gt;= 5,\n    quarter=df_in[\"ds\"].dt.quarter.astype(\"category\"),\n    ds_int=df_in[\"ds\"].astype(int),\n)\n\nnot_dummy = {\"y\", \"ds\", \"ds_int\"}\nto_dummy = list(set(df_dummies_all.columns) - not_dummy)\n\ndf_dummies_all = pd.get_dummies(\n    data=df_dummies_all,\n    columns=to_dummy,\n    drop_first=True,  # reduce the amount of cols with no additional info\n)\nall_features = list(set(df_dummies_all.columns) - {\"y\", \"ds\"})\n\n# slicing the input in train test\ndf_train_dummies_all = df_dummies_all[\n    (df_dummies_all[\"ds\"] &gt; \"2012\") & (df_dummies_all[\"ds\"] &lt; \"2015\")\n]\ndf_test_dummies_all = df_dummies_all[(df_dummies_all[\"ds\"] &gt; \"2015\")]\n\nX_train = df_train_dummies_all.loc[:, all_features]\ny_train = df_train_dummies_all[[\"y\"]]\n\nX_test = df_test_dummies_all.loc[:, all_features]\ny_test = df_test_dummies_all[[\"y\"]]\n\ndf_dummies_all.drop(columns=[\"ds_int\", \"y\"]).sample(\n    n=6,\n    ignore_index=True,\n    random_state=42,\n)\n\n\n\n\n\n\n\n\n\nds\nis_weekend_True\nquarter_2\nquarter_3\nquarter_4\nmonth_2\nmonth_3\nmonth_4\nmonth_5\nmonth_6\n...\nweek_50\nweek_51\nweek_52\nweek_53\ndayofweek_1\ndayofweek_2\ndayofweek_3\ndayofweek_4\ndayofweek_5\ndayofweek_6\n\n\n\n\n0\n2014-05-06\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\n2012-07-05\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\n2\n2015-06-21\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n3\n2012-03-09\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n4\n2012-08-10\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n5\n2013-05-11\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n\n\n6 rows √ó 74 columns\n\n\n\n\n\nCode\n# utilzing an elasticnet linear model to compensate for the amount of features\nelastic_params = {\n    \"l1_ratio\": np.linspace(start=0.000001, stop=1, num=100),\n    \"cv\": 7,\n    \"n_alphas\": 1_00,\n    \"n_jobs\": -1,\n}\n\npipeline_all = make_pipeline(MinMaxScaler(), ElasticNetCV(**elastic_params))\n\npipeline_all.fit(X=X_train, y=y_train.to_numpy().ravel())\ny_pred_dummies_all = pipeline_all.predict(X=X_test)\n\nmse_dummies_all = mean_squared_error(y_test, y_pred_dummies_all)\nmae_dummies_all = mean_absolute_error(y_test, y_pred_dummies_all)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=df_test[\"y\"],\n    label=\"test\",\n    fmt=\"-\",\n    alpha=0.7,\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred_dummies,\n    label=\"prediction with dummies\",\n    fmt=\"--\",\n)\n\nplt.plot_date(\n    x=df_test[\"ds\"],\n    y=y_pred_dummies_all,\n    label=\"prediction with all dummies\",\n    fmt=\"--\",\n)\n\n\nplt.legend(loc=\"upper right\")\nplt.tick_params(axis=\"x\", rotation=45)\nplt.ylabel(\"$y$\")\nplt.title(\n    f\"linear regression with dummies applied (mse= {mse_dummies_all:.3}, mae={mae_dummies_all:.3})\"\n)\nplt.show()\n\n\n\n\n\n\n\n\n\nImmediately it becomes obvious that the model captures more of the fine-grained movement of the time series. this is also reflected in the fact that both error metrics have improved.\n\n\nCode\nprint(f\"mean squared error = {mse_dummies_all:.3}\")\nprint(f\"improvement factor mse month dummies -&gt; {mse/mse_dummies:.3}x\")\nprint(f\"improvement factor mse all dummies   -&gt; {mse/mse_dummies_all:.3}x\")\nprint(\"-\" * 79)\n\nprint(f\"mean absolute error = {mae_dummies_all:.3}\")\nprint(f\"improvement factor mea month dummies -&gt; {mae/mae_dummies:.3}x\")\nprint(f\"improvement factor mea all dummies   -&gt; {mae/mae_dummies_all:.3}x\")\n\n\nmean squared error = 0.262\nimprovement factor mse month dummies -&gt; 1.93x\nimprovement factor mse all dummies   -&gt; 2.35x\n-------------------------------------------------------------------------------\nmean absolute error = 0.356\nimprovement factor mea month dummies -&gt; 1.56x\nimprovement factor mea all dummies   -&gt; 1.73x"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "hyper-shotgun",
    "section": "",
    "text": "Cluster\n\n\ntogether\n\n\n \n\n\n\n\n\n2024-01-17\n\n\nJoost de Theije + LLM\n\n\n7 min\n\n\n\n\n\n\n\n\n\n\n\n\nBoring linear forecast\n\n\nimproving performance by adding some dummies\n\n\n \n\n\n\n\n\n2023-03-5\n\n\nJoost de Theije\n\n\n8 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/cluster/cluster.html",
    "href": "posts/cluster/cluster.html",
    "title": "Cluster",
    "section": "",
    "text": "Unsupervised Learning -&gt; Clustering algorithms are used for unsupervised learning, ideal for exploratory data analysis.\nGrouping Data -&gt; These algorithms group similar data into clusters based on specific criteria.\nVariety of Applications -&gt; They‚Äôre used in diverse fields like customer segmentation, anomaly detection, and more.\nDifferent Techniques -&gt; Various types exist, like K-means and DBSCAN, each with unique strengths and suited for specific data types.\nChoice of Parameters -&gt; The selection and tuning of parameters, like the number of clusters, significantly influence the results.\n\nIn the vast field of machine learning, clustering algorithms hold a pivotal role. Used as a form of unsupervised learning, they uncover hidden patterns and structures within unlabeled data, making them instrumental for exploratory data analysis. The essence of clustering algorithms lies in their ability to sift through unstructured data and bring together similar items, forming distinct groups or ‚Äòclusters‚Äô based on defined criteria.\nThese algorithms have found their place in a myriad of real-world applications. From customer segmentation in marketing strategies, to image segmentation in computer vision, anomaly detection in cybersecurity, and dimensionality reduction in high-dimensional data‚Äîclustering algorithms are at the heart of insightful data-driven decision making.\nThe world of clustering algorithms is diverse, housing various types such as K-means, hierarchical, DBSCAN, and Gaussian Mixture Models, each coming with its unique strengths, limitations, and suitability for certain types of data.\nA crucial aspect of working with these algorithms is the specification of parameters. While some algorithms like K-means require the user to define the number of clusters in advance, others, like DBSCAN, determine the number of clusters based on the data itself. The choice and tuning of these parameters can significantly steer the algorithm‚Äôs effectiveness, making this a critical skill for any data practitioner.\nIn this blog post, we delve deeper into the intriguing world of clustering algorithms, demystifying their workings, exploring their varieties, and discussing how to choose and fine-tune parameters for optimal results. Stay tuned as we embark on this insightful journey."
  },
  {
    "objectID": "posts/cluster/cluster.html#tldr",
    "href": "posts/cluster/cluster.html#tldr",
    "title": "Cluster",
    "section": "",
    "text": "Unsupervised Learning -&gt; Clustering algorithms are used for unsupervised learning, ideal for exploratory data analysis.\nGrouping Data -&gt; These algorithms group similar data into clusters based on specific criteria.\nVariety of Applications -&gt; They‚Äôre used in diverse fields like customer segmentation, anomaly detection, and more.\nDifferent Techniques -&gt; Various types exist, like K-means and DBSCAN, each with unique strengths and suited for specific data types.\nChoice of Parameters -&gt; The selection and tuning of parameters, like the number of clusters, significantly influence the results.\n\nIn the vast field of machine learning, clustering algorithms hold a pivotal role. Used as a form of unsupervised learning, they uncover hidden patterns and structures within unlabeled data, making them instrumental for exploratory data analysis. The essence of clustering algorithms lies in their ability to sift through unstructured data and bring together similar items, forming distinct groups or ‚Äòclusters‚Äô based on defined criteria.\nThese algorithms have found their place in a myriad of real-world applications. From customer segmentation in marketing strategies, to image segmentation in computer vision, anomaly detection in cybersecurity, and dimensionality reduction in high-dimensional data‚Äîclustering algorithms are at the heart of insightful data-driven decision making.\nThe world of clustering algorithms is diverse, housing various types such as K-means, hierarchical, DBSCAN, and Gaussian Mixture Models, each coming with its unique strengths, limitations, and suitability for certain types of data.\nA crucial aspect of working with these algorithms is the specification of parameters. While some algorithms like K-means require the user to define the number of clusters in advance, others, like DBSCAN, determine the number of clusters based on the data itself. The choice and tuning of these parameters can significantly steer the algorithm‚Äôs effectiveness, making this a critical skill for any data practitioner.\nIn this blog post, we delve deeper into the intriguing world of clustering algorithms, demystifying their workings, exploring their varieties, and discussing how to choose and fine-tune parameters for optimal results. Stay tuned as we embark on this insightful journey."
  },
  {
    "objectID": "posts/cluster/cluster.html#data-preprocessing",
    "href": "posts/cluster/cluster.html#data-preprocessing",
    "title": "Cluster",
    "section": "2 Data Preprocessing",
    "text": "2 Data Preprocessing\nIn this initial stage, the goal is to prepare the data for analysis. This involves cleaning the data by removing or filling in missing values, which could be done through various strategies like dropping the missing rows, filling them with mean/median/mode, or using a prediction model. It‚Äôs also crucial to handle outliers and potentially normalize features if they‚Äôre on different scales. This stage might also involve dealing with categorical variables using encoding techniques. Effective preprocessing is crucial for reliable results in the subsequent stages.\n#TODO add intro to the dataset dataset can be found here\n\n\n\n\n\n\n\nField\nDescription\n\n\n\n\nCustomerID\nUnique ID assigned to the customer\n\n\nGender\nGender of the customer\n\n\nAge\nAge of the customer\n\n\nAnnual Income (k$)\nAnnual income of the customer\n\n\nSpending Score (1-100)\nScore assigned by the mall based on customer behavior and spending nature\n\n\n\n\n\nCode\nfrom functools import lru_cache\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport umap\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import power_transform\nfrom yellowbrick.cluster import kelbow_visualizer, silhouette_visualizer\n\nset_matplotlib_formats(\"svg\")\nsns.set_palette(\"tab10\")\nsns.set_style(\"darkgrid\")\nplt.style.use(\"seaborn-v0_8-darkgrid\")\nFIGSIZE = (12, 6)\n\n\n/opt/homebrew/Caskroom/miniconda/base/envs/hypershotgun/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\n\nCode\nsns.color_palette()\n\n\n\n\n\n\n\nCode\n# Load the customer dataset to analyze shopping patterns\ndf_mall = pd.read_csv(\"artifacts/Mall_Customers.csv\")\n\n# rename columns to be lowercase, for easy typing\ndf_mall = df_mall.rename(\n    columns={\n        \"CustomerID \": \"id\",\n        \"Gender \": \"gender\",\n        \"Age \": \"age\",\n        \"Annual Income (k$) \": \"income\",\n        \"Spending Score (1-100)\": \"spending\",\n    }\n)\ndf_mall[\"gender\"] = df_mall[\"gender\"].str.lower()\ndf_mall[\"gender\"] = df_mall[\"gender\"].str.strip()\n\n\n# look at a random sample to validate the contents\nprint(df_mall.sample(6))\n\n\n      id  gender  age  income  spending\n52    53  female   31      43        54\n31    32  female   21      30        73\n188  189  female   41     103        17\n11    12  female   35      19        99\n37    38  female   30      34        73\n82    83    male   67      54        41\n\n\nUpon examination of the dataset, it appears that the ‚Äògender‚Äô column is the only non-numeric feature. Specifically, it contains string values categorizing customers as either ‚ÄúMale‚Äù or ‚ÄúFemale‚Äù. All other columns - ‚Äòid‚Äô, ‚Äòage‚Äô, ‚Äòincome‚Äô, and ‚Äòspending‚Äô - are numeric data types.\nThe ‚Äòid‚Äô column seems to be a unique identifier for each customer. While numeric, this feature has very high cardinality (a distinct value for every customer). Features with high cardinality tend to dominate distance calculations in clustering algorithms and obscure more meaningful patterns in the data. Therefore, we should exclude the customer ID column from the feature set used for clustering.\nFor the remaining features to function effectively in clustering algorithms, the input features generally need to be numeric rather than categorical strings. Distance-based algorithms like k-means rely on computing distances between data points across features. String categories do not have an inherent numeric ordering, so the distance computations would not be meaningful.\nAdditionally, when performing exploratory analysis, a numeric encoding often allows easier visualization of the impact of gender relative to the other numeric features. Box plots, scatter plots with color-coded points, and other techniques can provide better insights into how gender correlates with shopper age, income or spending habits when mapped to a numeric form.\nTherefore, to enable the application of clustering algorithms and more impactful analysis, we need to process the ‚Äògender‚Äô column by encoding the categories as numbers. Common encoding schemes include mapping ‚ÄúMale‚Äù and ‚ÄúFemale‚Äù to 0 and 1 respectively, or using one-hot encoding to create an additional binary feature column for each category. After encoding, gender will be represented numerically like the other existing features.\nIn summary, as gender is the only non-numeric column, and ID has high cardinality unsuitable for clustering, effectively preparing the data requires encoding the gender categorical data and excluding the customer ID column.\n\n\nCode\n# convert gender to a numerical value via one-hot-encoding\n# clustering models usally need numerical values\ndf_mall = pd.get_dummies(df_mall, columns=[\"gender\"], drop_first=True)\n\n# list with features for easy reference\nfeatures = [\"age\", \"income\", \"spending\", \"gender_male\"]\ndf_feature = df_mall[features]\n\n\n# look at a random sample to validate the contents\ndf_feature.sample(5)\n\n\n\n\n\n\n\n\n\nage\nincome\nspending\ngender_male\n\n\n\n\n74\n59\n54\n47\nTrue\n\n\n190\n34\n103\n23\nFalse\n\n\n57\n69\n44\n46\nTrue\n\n\n177\n27\n88\n69\nTrue\n\n\n99\n20\n61\n49\nTrue\n\n\n\n\n\n\n\n\n\nCode\ndf_feature.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 200 entries, 0 to 199\nData columns (total 4 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   age          200 non-null    int64\n 1   income       200 non-null    int64\n 2   spending     200 non-null    int64\n 3   gender_male  200 non-null    bool \ndtypes: bool(1), int64(3)\nmemory usage: 5.0 KB"
  },
  {
    "objectID": "posts/cluster/cluster.html#exploratory-data-analysis",
    "href": "posts/cluster/cluster.html#exploratory-data-analysis",
    "title": "Cluster",
    "section": "3 Exploratory Data Analysis",
    "text": "3 Exploratory Data Analysis\nVisualize the data and derive initial insights.\n\n\nCode\nprint(df_feature.describe().T)\n\n\n          count   mean        std   min    25%   50%   75%    max\nage       200.0  38.85  13.969007  18.0  28.75  36.0  49.0   70.0\nincome    200.0  60.56  26.264721  15.0  41.50  61.5  78.0  137.0\nspending  200.0  50.20  25.823522   1.0  34.75  50.0  73.0   99.0\n\n\nThe dataset contains information 200 customers. The average (mean) age is 38.85 years. Ages range from 18 to 70, with 50% of customers aged 36 years or below.\nThe average annual income is $60,560, ranging from $15,000 to $137,000. 50% of customers earn $61,500 or less.\nFor the spending score (1-100), the average is 50.2. Half the customers have a spending score of 50 or below. The minimum is 1 and maximum 99, showing a wide range in spending habits.\nOverall, we see variation among customers in age, income levels, and purchasing patterns. Clustering algorithms can help segment customers into groups based on these attributes to develop targeted marketing approaches. let us first look at the distributions of the features.\n\n\nCode\nfig, ax = plt.subplots(1, 2, figsize=FIGSIZE)\n\nsns.countplot(\n    data=df_feature, x=\"gender_male\", stat=\"percent\", hue=\"gender_male\", ax=ax[0]\n)\n\nsns.kdeplot(x=\"age\", data=df_feature, hue=\"gender_male\", ax=ax[1])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nfig, ax = plt.subplots(1, 2, figsize=FIGSIZE)\n\ncurr_ax = ax[0]\nsns.regplot(\n    data=df_feature[df_feature[\"gender_male\"] == 0],\n    x=\"age\",\n    y=\"income\",\n    color=sns.color_palette()[0],\n    order=1,\n    lowess=True,\n    truncate=True,\n    ax=curr_ax,\n)\n\n\ncurr_ax = ax[0]\nsns.regplot(\n    data=df_feature[df_feature[\"gender_male\"] == 1],\n    x=\"age\",\n    y=\"income\",\n    color=sns.color_palette()[1],\n    order=1,\n    lowess=True,\n    truncate=True,\n    ax=curr_ax,\n)\ncurr_ax.legend(\n    [\"gender_male=0\", \"lowess regression\", \"gender_male=1\", \"lowess regression\"]\n)\ncurr_ax.set_title(\"age vs. income\")\n\n\ncurr_ax = ax[1]\nsns.regplot(\n    data=df_feature[df_feature[\"gender_male\"] == 0],\n    x=\"age\",\n    y=\"spending\",\n    color=sns.color_palette()[0],\n    order=1,\n    lowess=True,\n    truncate=True,\n    ax=curr_ax,\n)\n\n\ncurr_ax = ax[1]\nsns.regplot(\n    data=df_feature[df_feature[\"gender_male\"] == 1],\n    x=\"age\",\n    y=\"spending\",\n    color=sns.color_palette()[1],\n    order=1,\n    lowess=True,\n    truncate=True,\n    ax=curr_ax,\n)\ncurr_ax.legend(\n    [\"gender_male=0\", \"lowess regression\", \"gender_male=1\", \"lowess regression\"]\n)\ncurr_ax.set_title(\"age vs. spending\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nfig, ax = plt.subplots(1, 2, figsize=FIGSIZE)\n\ncurr_ax = ax[0]\nsns.scatterplot(\n    data=df_feature,\n    x=\"income\",\n    y=\"spending\",\n    hue=\"age\",\n    palette=sns.color_palette(\"viridis\", as_cmap=True),\n    # style=\"gender_male\",\n    ax=curr_ax,\n)\n\n\ncurr_ax = ax[1]\nsns.scatterplot(\n    data=df_feature,\n    x=\"income\",\n    y=\"spending\",\n    # hue=\"age\",\n    # palette=sns.color_palette(\"viridis\", 2),\n    hue=\"gender_male\",\n    ax=curr_ax,\n)\n\nplt.suptitle(\"Age vs. Spending\")\n\n\nText(0.5, 0.98, 'Age vs. Spending')\n\n\n\n\n\n\n\n\n\n\n\nCode\n# fig, ax = plt.subplots(1, 2, figsize=FIGSIZE)\n\n# curr_ax = ax[0]\n# sns.scatterplot(\n#     data=df_feature,\n#     x=\"spending\",\n#     y=\"age\",\n#     hue=\"age\",\n#     palette=sns.color_palette(\"viridis\", as_cmap=True),\n#     # style=\"gender_male\",\n#     ax=curr_ax,\n# )\n\n\n# curr_ax = ax[1]\n# sns.scatterplot(\n#     data=df_feature,\n#     x=\"income\",\n#     y=\"age\",\n#     hue=\"age\",\n#     palette=sns.color_palette(\"viridis\", as_cmap=True),\n#     ax=curr_ax,\n# )\n# plt.show()\n\n\n\n\nCode\n# create a ratio between income and spending\ndf_ratio = df_feature.assign(si_ratio=df_feature[\"income\"] / df_feature[\"spending\"])\n\nfig, ax = plt.subplots(1, 2, figsize=FIGSIZE)\ncurr_ax = ax[0]\n\nsns.scatterplot(\n    data=df_ratio,\n    x=\"si_ratio\",\n    y=\"age\",\n    ax=curr_ax,\n)\n\n\n# clip to 95% quantile of the si ratio,\n# this will zoom into the interesting part of the plot\ndf_ratio = df_ratio.assign(\n    si_ratio_clip=df_ratio[\"si_ratio\"].clip(\n        upper=np.quantile(df_ratio[\"si_ratio\"], 0.95)\n    )\n)\n\ncurr_ax = ax[1]\nsns.scatterplot(\n    data=df_ratio,\n    x=\"si_ratio_clip\",\n    y=\"age\",\n    ax=curr_ax,\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ndf_ratio = df_ratio.assign(\n    si_ratio_transform=power_transform(\n        df_ratio[\"si_ratio\"].to_numpy().reshape(-1, 1), method=\"yeo-johnson\"\n    )\n)\n\n\n\n\nCode\nfig, ax = plt.subplots(1, 2, figsize=FIGSIZE)\n\n\nplt.figure()\nsns.histplot(data=df_ratio[\"si_ratio\"], stat=\"percent\", ax=ax[0])\n\n# df_ratio[\"si_ratio\"].to_numpy().reshape(-1, 1), method=\"box-cox\"\n#     ) + 2\n\nsns.histplot(\n    data=df_ratio[\"si_ratio_transform\"],\n    stat=\"percent\",\n    ax=ax[1],\n)\nplt.show()\n\n\n\n\n\n\n\n\n\n&lt;Figure size 800x550 with 0 Axes&gt;\n\n\n\n\nCode\n@lru_cache(maxsize=None)\ndef calc_umap(\n    n_neighbors=15,\n    min_dist=0.15,\n    n_components=2,\n):\n    # data structure, with the goal of a 2D representation.\n    reducer = umap.UMAP(\n        n_neighbors=n_neighbors,\n        n_components=n_components,\n        min_dist=min_dist,\n        metric=\"euclidean\",\n        random_state=42,\n        n_jobs=1,  # setting to 1 to lock in the random state\n    )\n\n    # fit the data to the reducer\n    return reducer.fit_transform(df_feature)\n\n\ndef plot_umap(embeddings: np.array = None, ax: plt.axes = None):\n    # create the scatter plot of the 2 component embedding\n    # the order of x,y doesnt matter, the relative distance does\n    ax.scatter(x=embeddings[:, 0], y=embeddings[:, 1], s=12, alpha=0.7)\n\n    # remove axis labels and ticks\n    # as these are meaningless for umap\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n\n    # n_neighbors are formatted as floats  and min_dist are formatted as int\n    ax.set_title(f\"{n_neighbors=:.0f} {min_dist=:.2f}\")\n\n\n\n\nCode\n# defining the parameter sweep\nrange_min_dist = np.linspace(0, 1, 5)  # min_dist\nrange_n_neighbors = np.arange(10, 14)  # n_neighbors\n\n\n\n\nCode\n# creating the subplots and performing the embedding with the parameter sweep\nfig, ax = plt.subplots(\n    nrows=len(range_min_dist), ncols=len(range_n_neighbors), figsize=(16, 10)\n)\n\nfor i_min_dist, min_dist in enumerate(range_min_dist):\n    for i_n_neighbors, n_neighbors in enumerate(range_n_neighbors):\n        embeddings = calc_umap(\n            n_neighbors=int(n_neighbors),\n            min_dist=float(min_dist),\n        )\n        plot_umap(embeddings=embeddings, ax=ax[i_min_dist, i_n_neighbors])\n\nfig.supxlabel(\" -&gt; n_neighbors\")\nfig.supylabel(\" -&gt; min_dist\")\nfig.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/cluster/cluster.html#feature-engineering",
    "href": "posts/cluster/cluster.html#feature-engineering",
    "title": "Cluster",
    "section": "4 Feature Engineering",
    "text": "4 Feature Engineering\nBased on your EDA, create features that might help define customer segmentation, such as total purchase value, average purchase size, frequency of purchase, etc.\n\ncreate bins for the age bracket\ncalculate descriptive stats for each bracket i.e mean spending size, income\nratio of income of spending\nnormalization of variables -&gt; make comment on the distance calculations\n\n\n\nCode\n# bin the age variable\nbinned = pd.cut(\n    df_feature[\"age\"],\n    bins=[0, 20, 30, 40, 50, 60, 70, 80],\n    labels=[\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n    ],\n)\ndf_feature = df_feature.assign(age_bin=binned)\ndf_feature.sample(10)\n\n\n\n\n\n\n\n\n\nage\nincome\nspending\ngender_male\nage_bin\n\n\n\n\n44\n49\n39\n28\nFalse\n4\n\n\n121\n38\n67\n40\nFalse\n3\n\n\n74\n59\n54\n47\nTrue\n5\n\n\n37\n30\n34\n73\nFalse\n2\n\n\n143\n32\n76\n87\nFalse\n3\n\n\n147\n32\n77\n74\nFalse\n3\n\n\n96\n47\n60\n47\nFalse\n4\n\n\n89\n50\n58\n46\nFalse\n4\n\n\n136\n44\n73\n7\nFalse\n4\n\n\n189\n36\n103\n85\nFalse\n3\n\n\n\n\n\n\n\n\n\nCode\n# ratios\ndf_feature = df_feature.assign(\n    si_ratio=df_feature[\"income\"] / df_feature[\"spending\"],\n    sa_ratio=df_feature[\"age\"] / df_feature[\"spending\"],\n)\ndf_feature.sample(10)\n\n\n\n\n\n\n\n\n\nage\nincome\nspending\ngender_male\nage_bin\nsi_ratio\nsa_ratio\n\n\n\n\n180\n37\n97\n32\nFalse\n3\n3.031250\n1.156250\n\n\n11\n35\n19\n99\nFalse\n3\n0.191919\n0.353535\n\n\n146\n48\n77\n36\nTrue\n4\n2.138889\n1.333333\n\n\n49\n31\n40\n42\nFalse\n3\n0.952381\n0.738095\n\n\n21\n25\n24\n73\nTrue\n2\n0.328767\n0.342466\n\n\n39\n20\n37\n75\nFalse\n1\n0.493333\n0.266667\n\n\n65\n18\n48\n59\nTrue\n1\n0.813559\n0.305085\n\n\n97\n27\n60\n50\nFalse\n2\n1.200000\n0.540000\n\n\n134\n20\n73\n5\nTrue\n1\n14.600000\n4.000000\n\n\n193\n38\n113\n91\nFalse\n3\n1.241758\n0.417582\n\n\n\n\n\n\n\n\n\nCode\n# turn off the formatter, to increase readability\n# fmt: off\n# create a new column with the difference between income and the mean income of the gender group\ndf_feature = df_feature.assign(\n    # create a new column with the difference between income and the mean income of the gender group\n    income_vs_gender_mean=df_feature['income'] - df_feature.groupby(\"gender_male\",)[[\"income\",]].transform(\"mean\").iloc[:, 0],\n    spending_vs_gender_mean=df_feature[\"spending\"] - df_feature.groupby(\"gender_male\")[[\"spending\",]].transform(\"mean\").iloc[:, 0],\n\n    # create a new column with the difference between income and the mean income of the age group\n    spending_vs_age_mean=df_feature[\"spending\"] - df_feature.groupby(\"age_bin\",observed=False)[[\"spending\",]].transform(\"mean\").iloc[:, 0],\n    income_vs_age_mean=df_feature[\"spending\"] - df_feature.groupby(\"age_bin\",observed=False)[[\"income\",]].transform(\"mean\").iloc[:, 0],\n)\n# fmt: on\n\ndf_feature.sample(10)\n\n\n\n\n\n\n\n\n\nage\nincome\nspending\ngender_male\nage_bin\nsi_ratio\nsa_ratio\nincome_vs_gender_mean\nspending_vs_gender_mean\nspending_vs_age_mean\nincome_vs_age_mean\n\n\n\n\n164\n50\n85\n26\nTrue\n4\n3.269231\n1.923077\n22.772727\n-22.511364\n-8.394737\n-37.605263\n\n\n47\n27\n40\n47\nFalse\n2\n0.851064\n0.574468\n-19.250000\n-4.526786\n-20.222222\n-9.755556\n\n\n171\n28\n87\n75\nTrue\n2\n1.160000\n0.373333\n24.772727\n26.488636\n7.777778\n18.244444\n\n\n69\n32\n48\n47\nFalse\n3\n1.021277\n0.680851\n-11.250000\n-4.526786\n-10.500000\n-21.633333\n\n\n10\n67\n19\n14\nTrue\n6\n1.357143\n4.785714\n-43.227273\n-34.511364\n-30.176471\n-36.000000\n\n\n45\n24\n39\n65\nFalse\n2\n0.600000\n0.369231\n-20.250000\n13.473214\n-2.222222\n8.244444\n\n\n6\n35\n18\n6\nFalse\n3\n3.000000\n5.833333\n-41.250000\n-45.526786\n-51.500000\n-62.633333\n\n\n112\n38\n64\n42\nFalse\n3\n1.523810\n0.904762\n4.750000\n-9.526786\n-15.500000\n-26.633333\n\n\n62\n67\n47\n52\nFalse\n6\n0.903846\n1.288462\n-12.250000\n0.473214\n7.823529\n2.000000\n\n\n44\n49\n39\n28\nFalse\n4\n1.392857\n1.750000\n-20.250000\n-23.526786\n-6.394737\n-35.605263\n\n\n\n\n\n\n\n\n\nCode\n# apply power transform\n# sns.histplot(df_feature['age'])\nsns.histplot(df_feature[\"income_vs_gender_mean\"])\n# sns.histplot(df_feature['age'])\n# sns.histplot(df_feature['age'])\n# sns.histplot(df_feature['age'])\n\n\n\n\n\n\n\n\n\n\n\nCode\n# casting values to integer in order for scaling later on\ndf_feature = df_feature.assign(\n    age_bin=df_feature[\"age_bin\"].astype(int),\n)\n\ndf_feature[df_feature.select_dtypes(include=\"number\").columns] = power_transform(\n    X=df_feature[df_feature.select_dtypes(include=\"number\").columns],\n    method=\"yeo-johnson\",\n)\ndf_feature.sample(10)\n\n\n\n\n\n\n\n\n\nage\nincome\nspending\ngender_male\nage_bin\nsi_ratio\nsa_ratio\nincome_vs_gender_mean\nspending_vs_gender_mean\nspending_vs_age_mean\nincome_vs_age_mean\n\n\n\n\n52\n-0.461118\n-0.614792\n0.188655\nFalse\n-0.113303\n-0.612015\n-0.496126\n-0.606341\n0.095496\n-0.305931\n-0.218024\n\n\n92\n0.746587\n0.058529\n0.000449\nTrue\n0.585358\n-0.008416\n0.211683\n-0.039215\n0.018297\n0.618943\n-0.217019\n\n\n172\n-0.056996\n1.003720\n-1.621509\nTrue\n-0.113303\n1.834374\n1.533763\n0.945926\n-1.496878\n-1.858962\n-1.742823\n\n\n78\n-1.240020\n-0.170436\n0.113709\nFalse\n-0.918216\n-0.238177\n-0.829623\n-0.159462\n0.017697\n-0.748729\n0.141742\n\n\n122\n0.233319\n0.387546\n0.337282\nFalse\n-0.113303\n-0.048344\n-0.253395\n0.407605\n0.251137\n-0.135343\n-0.073968\n\n\n103\n-0.924589\n0.133054\n0.225966\nTrue\n-0.918216\n-0.123259\n-0.746371\n0.038904\n0.251737\n-0.639149\n0.255073\n\n\n154\n0.686612\n0.701866\n-1.343172\nFalse\n0.585358\n1.496642\n1.388605\n0.731371\n-1.380962\n-0.862830\n-1.367206\n\n\n146\n0.746587\n0.667593\n-0.503866\nTrue\n0.585358\n0.712115\n0.599600\n0.588853\n-0.486937\n-0.082168\n-0.676363\n\n\n196\n0.563320\n2.202670\n-0.827902\nFalse\n0.585358\n1.436913\n0.816540\n2.417222\n-0.914864\n-0.419818\n-0.954488\n\n\n6\n-0.133840\n-1.814835\n-1.820424\nFalse\n-0.113303\n1.079895\n1.790491\n-1.644760\n-1.769335\n-1.991147\n-1.878341\n\n\n\n\n\n\n\n\n\nCode\ndf_feature.describe().T\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nage\n200.0\n7.016610e-16\n1.002509\n-1.851739\n-0.661494\n-0.056996\n0.805504\n1.852811\n\n\nincome\n200.0\n-5.684342e-16\n1.002509\n-1.989930\n-0.678427\n0.114476\n0.701866\n2.515898\n\n\nspending\n200.0\n3.552714e-17\n1.002509\n-2.100163\n-0.553723\n0.038318\n0.881491\n1.786065\n\n\nage_bin\n200.0\n5.462297e-16\n1.002509\n-1.892399\n-0.918216\n-0.113303\n0.585358\n1.777954\n\n\nsi_ratio\n200.0\n4.263256e-16\n1.002509\n-2.274854\n-0.463817\n-0.124667\n0.335556\n2.253114\n\n\nsa_ratio\n200.0\n-2.575717e-16\n1.002509\n-1.693664\n-0.914656\n0.032022\n0.665247\n2.116408\n\n\nincome_vs_gender_mean\n200.0\n-7.105427e-17\n1.002509\n-1.895689\n-0.729683\n0.076205\n0.633519\n2.695342\n\n\nspending_vs_gender_mean\n200.0\n-5.329071e-17\n1.002509\n-1.846407\n-0.652651\n-0.020890\n0.834990\n1.886854\n\n\nspending_vs_age_mean\n200.0\n-3.108624e-17\n1.002509\n-2.155238\n-0.827041\n0.063810\n0.678319\n2.582476\n\n\nincome_vs_age_mean\n200.0\n-4.440892e-17\n1.002509\n-2.047257\n-0.712264\n0.035377\n0.658368\n2.158512"
  },
  {
    "objectID": "posts/cluster/cluster.html#clustering",
    "href": "posts/cluster/cluster.html#clustering",
    "title": "Cluster",
    "section": "5 Clustering",
    "text": "5 Clustering\nUse a suitable clustering algorithm (like K-means or hierarchical clustering) to divide customers into distinct groups.\n\n\nCode\nfig, ax = plt.subplots(figsize=FIGSIZE)\n\n_ = kelbow_visualizer(\n    KMeans(n_init=10),\n    X=df_feature,\n    timings=False,\n    metric=\"distortion\",\n    ax=ax,\n)  # distortion: mean sum of squared distances to centers\n\n\n\n\n\n\n\n\n\n\n\nCode\n# fit kmeans for various number of clusters\nkmeans_clusters = [\n    KMeans(n_clusters=i, n_init=\"auto\", max_iter=900) for i in range(2, 11)\n]\n\n\n\n\nCode\nfig, axes = plt.subplots(3, 3, figsize=(18, 16), layout=\"constrained\")\n\nfor i, ax in enumerate(axes.flatten()):\n    silhouette_visualizer(\n        kmeans_clusters[i],\n        X=df_feature,\n        ax=ax,\n        is_fitted=False,\n        show=False,\n        colors=sns.color_palette(\"tab10\"),\n    )\nplt.tight_layout()\nplt.show()\n\n\n/var/folders/q6/pntlsv6s1j19xm8fhz9g32fr0000gn/T/ipykernel_80979/1231921934.py:12: UserWarning: The figure layout has changed to tight\n  plt.tight_layout()\n\n\n\n\n\n\n\n\n\n\n\nCode\ndecomp = PCA(n_components=2)\ndecomp_components = decomp.fit_transform(df_feature)\n\n\nfig, ax = plt.subplots(figsize=FIGSIZE)\nsns.scatterplot(\n    x=decomp_components[:, 0],\n    y=decomp_components[:, 1],\n    hue=kmeans_clusters[4].predict(df_feature),\n    palette=sns.color_palette(\"tab10\"),\n    ax=ax,\n)\n\nplt.suptitle(\"data visualised with PCA\")\nplt.show()\n\n\n/var/folders/q6/pntlsv6s1j19xm8fhz9g32fr0000gn/T/ipykernel_80979/1685628906.py:6: UserWarning: The palette list has more values (10) than needed (6), which may not be intended.\n  sns.scatterplot(\n\n\n\n\n\n\n\n\n\n\n\nCode\ndecomp_umap = umap.UMAP(\n    n_components=2, min_dist=0.5, n_neighbors=12, n_jobs=1, random_state=92\n)\ndecomp_components_umap = decomp_umap.fit_transform(df_feature)\n\nfig, ax = plt.subplots(figsize=FIGSIZE)\n\nsns.scatterplot(\n    x=decomp_components_umap[:, 0],\n    y=decomp_components_umap[:, 1],\n    hue=kmeans_clusters[4].predict(df_feature),\n    palette=sns.color_palette(\"tab10\", 6),\n    ax=ax,\n)\n\nplt.show()"
  },
  {
    "objectID": "posts/cluster/cluster.html#analysis-and-evaluation",
    "href": "posts/cluster/cluster.html#analysis-and-evaluation",
    "title": "Cluster",
    "section": "6 Analysis and Evaluation",
    "text": "6 Analysis and Evaluation\nAnalyze each customer group‚Äôs traits, like average age or buying habits. Use metrics like Silhouette Score or Dunn Index to assess clustering quality, evaluating cluster cohesion and separation. A successful clustering result scores well on these metrics and provides actionable business insights.\n\n\nCode\ndf_cluster = df_feature.assign(cluster=kmeans_clusters[4].predict(df_feature))\ndf_mall_cluster = df_mall.assign(cluster=kmeans_clusters[4].predict(df_feature)).drop(\n    columns=[\"id\"]\n)\n\n\n\n\nCode\n#\ndf_all = pd.concat([df_mall.drop(columns=[\"id\"]), df_cluster], axis=1)\n\n\n\n\nCode\ngrouper = df_mall_cluster.groupby(\"cluster\", as_index=False)\ndf_cluster_agg = grouper.mean().round(2)\ndf_cluster_agg = df_cluster_agg.assign(\n    count=grouper.count()[\"age\"], age=(df_cluster_agg[\"age\"].astype(\"int\"))\n)\n\n\n\n\nCode\ndf_cluster_agg\n\n\n\n\n\n\n\n\n\ncluster\nage\nincome\nspending\ngender_male\ncount\n\n\n\n\n0\n0\n32\n86.54\n82.13\n0.46\n39\n\n\n1\n1\n55\n54.77\n48.23\n0.46\n48\n\n\n2\n2\n24\n27.08\n76.12\n0.48\n25\n\n\n3\n3\n41\n89.41\n15.59\n0.56\n32\n\n\n4\n4\n27\n56.05\n48.35\n0.30\n37\n\n\n5\n5\n46\n26.11\n17.42\n0.37\n19\n\n\n\n\n\n\n\n\n\nCode\nsns.boxplot(\n    df_mall_cluster,\n    y=\"cluster\",\n    x=\"age\",\n    orient=\"h\",\n    hue=\"cluster\",\n    palette=sns.color_palette(\"tab10\", 6),\n)\n\nplt.title(\"Age of each customer segment\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nsns.countplot(\n    df_cluster,\n    x=\"cluster\",\n    hue=\"gender_male\",\n    stat=\"percent\",\n    palette=sns.color_palette(\"tab10\", 2),\n)\n\nplt.title(\"gender ration between the customer segments\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\na = 0.1\nmean_gender = df_mall[\"gender_male\"].mean()\nl_mean_gender, u_mean_gender = mean_gender * (1 - a), mean_gender * (1 + a)\n\n\n\n\nCode\n# define a mostly gender column\n# determine which cluster falls outside of the bounds\ndf_gender = df_cluster_agg[[\"cluster\", \"gender_male\"]].assign(gender=\"neutral\")\ndf_gender.loc[df_gender[\"gender_male\"].gt(u_mean_gender), \"gender\"] = \"mostly men\"\ndf_gender.loc[df_gender[\"gender_male\"].lt(l_mean_gender), \"gender\"] = \"mostly female\"\ndf_gender\n\n\n\n\n\n\n\n\n\ncluster\ngender_male\ngender\n\n\n\n\n0\n0\n0.46\nneutral\n\n\n1\n1\n0.46\nneutral\n\n\n2\n2\n0.48\nneutral\n\n\n3\n3\n0.56\nmostly men\n\n\n4\n4\n0.30\nmostly female\n\n\n5\n5\n0.37\nmostly female\n\n\n\n\n\n\n\n\n\nCode\nfig, ax = plt.subplots(1, 1, figsize=FIGSIZE)\n\ncurr_ax = ax\n_ = sns.scatterplot(\n    data=df_cluster_agg,\n    x=\"income\",\n    y=\"spending\",\n    hue=\"cluster\",\n    palette=sns.color_palette(\"tab10\", 6),\n    s=200,\n    ax=curr_ax,\n)\n\nxlim0, xlim1 = ax.get_xlim()\nylim0, ylim1 = ax.get_ylim()\n\nplt.vlines(\n    df_mall_cluster[\"income\"].median(), ylim0, ylim1, color=\"grey\", linestyles=\"--\"\n)\nplt.hlines(\n    df_mall_cluster[\"spending\"].median(),\n    xlim0,\n    xlim1,\n    color=\"grey\",\n    linestyles=\"--\",\n)\nplt.suptitle(\"Age vs. Spending\")\nplt.show()"
  },
  {
    "objectID": "posts/cluster/cluster.html#insights-and-business-applications",
    "href": "posts/cluster/cluster.html#insights-and-business-applications",
    "title": "Cluster",
    "section": "7 Insights and Business Applications",
    "text": "7 Insights and Business Applications\nExplain how the results could be used to tailor marketing strategies towards each segment for improved customer engagement and retention."
  }
]